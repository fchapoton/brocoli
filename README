===================================================================================
BRoCoLi - Package dealing with LImit ROots of COxeter groups (eternal Beta version)
===================================================================================

This package deals with limits roots of infinite Coxeter groups and related structures.

This code, and its previous versions (in collaboration with Vivien Ripoll), 
was used to produce pictures contained in the following articles:

###############################################################################
#
#    This code's ultimate goal is to be merged into the Sagemath software.
#    Some tickets related to this project:
#
#    http://trac.sagemath.org/ticket/17798
#    http://trac.sagemath.org/ticket/16126
#    http://trac.sagemath.org/ticket/15703
#    http://trac.sagemath.org/ticket/16087
#
###############################################################################


Installation
------------

Local install from source
^^^^^^^^^^^^^^^^^^^^^^^^^

Download the tar ball source and run the following command in the brocoli folder::

    $ sage  -pip install --upgrade --no-index -v .

Install from PyPI
^^^^^^^^^^^^^^^^^^

TODO: distribute on PyPI.

Usage
-----

Once the package is installed, you can use it on Sage with::

    sage: from brocoli import *
    sage: M1 = CoxeterMatrix([[1,4,4],[4,1,4],[4,4,1]])
    sage: GR1 = GeometricRepresentationCoxeterGroup(M1);GR1
    Geometric representation of a Coxeter group of rank 3 with Coxeter matrix
    [1 4 4]
    [4 1 4]
    [4 4 1]

Documentation
-------------

There are two versions of the documentation located in the folder ``docs``. There is an ``html`` version with main page ``index.html`` and a ``pdf`` version.

    $ cd docs
    $ sage -sh -c "make html"

Or for short::

    $ make doc

For this to work on your own package, make sure you follow the same structure as 
we do here.

 * Create a ``docs`` folder containing the exact same ``Makefile`` and a ``source``
   folder.
 * Copy and paste the ``docs/source/conf.py`` file from this package and update
   the few project specific variables at the beginning of the file.
 * Create an ``index.rst`` file as well as a ``<module name>.rst`` file for each
   module you want on the documentation. 

Travis CI integration
---------------------

Scripts that run ``make test`` on various SageMath versions on the
Travis CI system are included.
https://docs.travis-ci.com/user/for-beginners explains how to enable
automatic Travis CI builds for your GitHub-hosted project.

The scripts download and install binary releases (7.1-7.4) from a
SageMath mirror.  Edit ``.travis-install.sh`` if some optional or
experimental SageMath packages need to be installed prior to running
your package.  Edit ``.travis.yml`` to change the list of SageMath
versions used.

Automatically deploying documentation to GitHub pages using Travis CI
---------------------------------------------------------------------

 * First do the steps described above to enable Travis CI integration
   of your GitHub-hosted project.
   
 * If you don't already have GitHub pages for your project: Create and
   checkout a branch ``gh-pages`` in your repository and put an empty
   file ``.nojekyll`` in it.  (See
   https://help.github.com/articles/files-that-start-with-an-underscore-are-missing/)::
   Commit it and push it to GitHub::

    $ git clone --single-branch --depth 1 https://github.com/USER/PROJECT.git gh-pages
    $ cd gh-pages
    $ git checkout --orphan gh-pages
    $ git rm -rf .
    $ touch .nojekyll
    $ git add .nojekyll
    $ git commit -m "Initial commit"
    $ git push -u origin gh-pages
    $ cd ..
    
 * (Back in your working copy:) Generate a new ssh key pair with an
   empty passphrase::

    $ ssh-keygen -t dsa -f .travis_ci_gh_pages_deploy_key

 * Add the public ssh key (contents of the file
   ``.travis_ci_gh_pages_deploy_key.pub``) to your GitHub repository
   as a deploy key (Settings/Deploy keys/Add deploy key).
   Title: Key for deploying documentation to GitHub pages.
   Check Allow write access.

 * Install the Travis CI command-line client from
   https://github.com/travis-ci/travis.rb::

    $ gem install travis
   
 * Log in to Travis CI using your GitHub credentials::

    $ travis login
   
 * Encrypt the private ssh key, add the decryption keys
   as secure environment variables to Travis CI, and
   add code to ``.travis.yml`` to decrypt it::

    $ travis encrypt-file .travis_ci_gh_pages_deploy_key --add before_script

 * Add the encrypted private ssh key to the repository::

    $ git add .travis_ci_gh_pages_deploy_key.enc

 * Have git ignore the other keys (and the gh-pages directory)::

    $ echo >> .gitignore
    $ echo "/.travis_ci_gh_pages_deploy_key" >> .gitignore
    $ echo "/.travis_ci_gh_pages_deploy_key.pub" >> .gitignore
    $ echo "/gh-pages" >> .gitignore
    $ git add .gitignore

 * Edit ``.travis.yml`` to adjust variables ``DEPLOY_DOC_...``

 * Commit all changes to GitHub.  The Travis CI build should then run
   automatically and deploy it::

    $ git add .travis.yml
    $ git commit -m "Deploy built documentation to GitHub"
    $ git push
 
 * The deployed documentation will be available at:
   https://USER.github.io/PROJECT/doc/html/
   (this can be customized).
